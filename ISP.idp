vocabulary V {
    type Fase isa int
    type Vak
    type VakGroepType constructed from {AVO,Verdere_Specialisatie,Opleiding,Bachelor_Verbredend,Specialisatie}
    type VakGroep 
    type Studiepunten isa int
    type Semester constructed from {Eerste,Tweede,Jaar}
    
    IsType(VakGroep,VakGroepType)
    Verplicht(Vak,VakGroep)
    InVakGroep(Vak,VakGroep)
    InFase(Vak,Fase)
    Geselecteerd(Vak,Fase)
	NietGeselecteerd(Vak)
    
    MinAantalStudiepunten(VakGroep):Studiepunten
    MaxAantalStudiepunten(VakGroep):Studiepunten
    AantalStudiepunten(Vak):Studiepunten
    GeselecteerdAantalStudiepuntenPerVakGroep(VakGroep):Studiepunten
    GeselecteerdAantalStudiepuntenPerSemester(Semester,Fase):Studiepunten
    GeselecteerdAantalStudiepuntenTotaal : Studiepunten
    VerschilPerFase(Fase) : Studiepunten
    AbsoluutVerschilPerFase(Fase) : Studiepunten
    InSemester(Vak):Semester
    Evenwicht : Studiepunten
}


theory T : V {
    //Alle verplichte vakken van een opleiding moeten geselecteerd worden.
    !vg[VakGroep],v[Vak] : IsType(vg,Opleiding) & Verplicht(v,vg) => ?1f[Fase] : InFase(v,f) & Geselecteerd(v,f). 
    
    //Als er specialisaties bestaan, moeten voor minstens 1 specialisatie alle verplichte vakken geselecteerd worden.
    !vg[VakGroep] : IsType(vg,Specialisatie) => ?vg1[VakGroep] : IsType(vg1,Specialisatie) & !v[Vak] : Verplicht(v,vg1) => ?1f[Fase] : InFase(v,f) & Geselecteerd(v,f).
    
    //Als er bachelor verbredende pakketten bestaan, moeten voor minstens 1 pakket alle verplichte vakken geselecteerd worden.
    !vg[VakGroep] : IsType(vg,Bachelor_Verbredend) => ?vg1[VakGroep] : IsType(vg1,Bachelor_Verbredend) & !v[Vak] : Verplicht(v,vg1) => ?1f[Fase] : InFase(v,f) & Geselecteerd(v,f).
    
    !vg[VakGroep] : IsType(vg,Opleiding) => GeselecteerdAantalStudiepuntenPerVakGroep(vg) = sum{v[Vak], sp[Studiepunten],f[Fase] : Geselecteerd(v,f) & AantalStudiepunten(v)=sp : sp }.
    
    !vg[VakGroep] : IsType(vg,Verdere_Specialisatie) => GeselecteerdAantalStudiepuntenPerVakGroep(vg) = sum{v[Vak], sp[Studiepunten],f[Fase], vg1[VakGroep] : (InVakGroep(v,vg) | (InVakGroep(v,vg1) & IsType(vg1,Specialisatie))) & Geselecteerd(v,f) & AantalStudiepunten(v)=sp : sp }.
    
    !vg[VakGroep] : IsType(vg,AVO) => GeselecteerdAantalStudiepuntenPerVakGroep(vg) = sum{v[Vak], sp[Studiepunten],f[Fase] : InVakGroep(v,vg) & Geselecteerd(v,f) & AantalStudiepunten(v)=sp : sp }.
    
    !vg[VakGroep] : IsType(vg,Specialisatie) | IsType(vg,Bachelor_Verbredend) => GeselecteerdAantalStudiepuntenPerVakGroep(vg) = 0.
    
    //Het totaal aantal studiepunten van de geselecteerde vakken uit een specifieke vakgroep moet tussen het minimum en maximum aantal studiepunten liggen van diezelfde vakgroep.
    !vg[VakGroep] : MaxAantalStudiepunten(vg) > 0 => MinAantalStudiepunten(vg) =< GeselecteerdAantalStudiepuntenPerVakGroep(vg) =< MaxAantalStudiepunten(vg).
    
    //Het totaal aantal studiepunten van de geselecteerde vakken per fase moet tussen de 60 en 66 liggen.
    !f[Fase] : 60 =< sum{v[Vak],s[Studiepunten] : Geselecteerd(v,f) & AantalStudiepunten(v)=s : s} =< 66.
   	
    !s[Semester],f[Fase] : GeselecteerdAantalStudiepuntenPerSemester(s,f) = sum{v[Vak],sp[Studiepunten] : InSemester(v)=s & Geselecteerd(v,f) & AantalStudiepunten(v)=sp : sp}.
   
    !v[Vak] : NietGeselecteerd(v) => ~?f[Fase] : Geselecteerd(v,f).
    
    GeselecteerdAantalStudiepuntenTotaal = sum{v s f : Geselecteerd(v,f) & AantalStudiepunten(v) = s : s}.
    
    !f[Fase] : VerschilPerFase(f) = sum{ sp[Studiepunten] : GeselecteerdAantalStudiepuntenPerSemester(Eerste,f)=sp : sp } - sum{ sp[Studiepunten] : GeselecteerdAantalStudiepuntenPerSemester(Tweede,f)=sp : sp }.
   	
    !f[Fase] : abs(VerschilPerFase(f)) = AbsoluutVerschilPerFase(f).
    
    Evenwicht = sum{f sp : AbsoluutVerschilPerFase(f) = sp : sp}.
}

term T1 : V {
    Evenwicht
}

term T2 : V {
    GeselecteerdAantalStudiepuntenTotaal
}

vocabulary V_out {
    extern V::Geselecteerd/2
    extern V::NietGeselecteerd/1
    //extern V::AantalStudiepunten/1:1
    //extern V::GeselecteerdAantalStudiepuntenPerVakGroep/1:1
}


procedure main() {
    stdoptions.nbmodels = 0
    //printmodels(modelexpand(T,S))
    //sols = modelexpand(T,S)
    //print(#sols.." solutions found.")
    //printmodels(sols)
    print(minimize(T,S,T2)[1])
    //models = modelexpand(T,S)
    //print(query(Q,models[1]))
    //print(sat(T,S))
    //unsatstructure(T,S)
    //print(unsatstructure(T,S))
    //print(unsatstructure(T,S,V_out))
    //print(onemodel(T,S))
}

include "DomainTI.idp"
